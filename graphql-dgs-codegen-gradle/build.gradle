/*
 *
 *  Copyright 2020 Netflix, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

plugins {
    id 'com.gradle.plugin-publish' version '1.3.1'
}

apply plugin: 'java-gradle-plugin'

dependencies {
    api project(":graphql-dgs-codegen-core")
    compileOnly "com.netflix.nebula:gradle-dependency-lock-plugin:14.1.4"
    compileOnly "org.jetbrains.kotlin:kotlin-gradle-plugin"

    testApi gradleTestKit()
    testImplementation("com.google.guava:guava:33.4.+")
}

description = 'Netflix GraphQL DGS Code Generation Plugin'


group = 'com.netflix.graphql.dgs.codegen'
gradlePlugin {
    website.set("https://github.com/Netflix/dgs-codegen")
    vcsUrl.set("https://github.com/Netflix/dgs-codegen.git")
    plugins {
        create("codegen") {
            id = 'com.netflix.dgs.codegen'
            implementationClass = 'com.netflix.graphql.dgs.codegen.gradle.CodegenPlugin'
            displayName = 'DGS Code Generation Plugin'
            description = 'Gradle plugin for generating Java and Kotlin classes from GraphQL Schema'
        }
    }
}

publishPlugins.dependsOn tasks.check
gradle.taskGraph.whenReady { graph ->
    tasks.publishPlugins.onlyIf {
        graph.hasTask(':final')
    }
}

project.afterEvaluate {
    //Disable marker tasks
    project.tasks.findAll {
        (it.name.contains("Marker") && it.name.contains('Maven')) ||
                it.name.contains("PluginMarkerMavenPublicationToNetflixOSSRepository") ||
                it.name.contains("PluginMarkerMavenPublicationToSonatypeRepository") ||
                it.name.contains("publishPluginMavenPublicationToNetflixOSSRepository") ||
                it.name.contains("publishPluginMavenPublicationToSonatypeRepository")
    }.each {
        it.enabled = false
    }

}

TaskProvider validatePluginsTask = project.tasks.named('validatePlugins')
TaskProvider publishPluginsTask = project.tasks.named('publishPlugins')
project.plugins.withId('nebula.release') {
    project.tasks.withType(PublishToMavenRepository).configureEach {
        def releasetask = project.rootProject.tasks.named('release')
        if (releasetask) {
              it.mustRunAfter(releasetask)
              it.dependsOn(validatePluginsTask)
              it.dependsOn(publishPluginsTask)
        }
    }
}

signing {
    setRequired(false)
}