/*
 *
 *  Copyright 2020 Netflix, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.netflix.graphql.dgs

import org.assertj.core.api.Assertions.assertThat
import org.gradle.testkit.runner.GradleRunner
import org.gradle.testkit.runner.TaskOutcome.SUCCESS
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.Test
import org.junit.jupiter.api.io.TempDir
import java.nio.file.Path
import java.nio.file.Paths
import kotlin.io.path.div

/**
 * A simple unit test for the 'com.netflix.graphql.dgs.greeting' plugin.
 */
class CodegenGradlePluginTest {

    @TempDir
    lateinit var projectDir: Path

    @BeforeEach
    fun setUp() {
        val projectResourcePath = Paths.get("src", "test", "resources", "test-project")
        projectResourcePath.toFile().copyRecursively(target = projectDir.toFile())
    }

    @Test
    fun taskRegisteredSuccessfully() {
        // get a list of Gradle tasks
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "-c", "smoke_test_settings.gradle",
                "tasks", "--all"
            ).forwardOutput()
            .build()

        // Verify the result
        assertThat(result.output).contains("generateJava")
    }

    @Test
    fun taskDependenciesRegisteredSuccessfully() {
        // get a list of Gradle tasks
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "-c", "smoke_test_settings.gradle",
                "clean",
                "copyMainSources"
            ).forwardOutput()
            .build()

        // Verify the result
        assertThat(result.task(":generateJava")).isNotNull
        assertThat(result.task(":generateJava")!!.outcome).isEqualTo(SUCCESS)
    }

    @Test
    fun sourcesGenerated() {
        // build a project
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "--stacktrace",
                "-c", "smoke_test_settings.gradle",
                "clean",
                "build"
            ).forwardOutput()
            .withDebug(true)
            .build()

        // Verify the result
        assertThat(result.task(":build")).extracting { it?.outcome }.isEqualTo(SUCCESS)
        // Verify that POJOs are generated in the configured directory

        assertThat(projectDir / EXPECTED_PATH / "Result.java").exists()
    }

    @Test
    fun sourcesGenerated_UsingDefaultPath() {
        // build a project
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "--stacktrace",
                "-c", "smoke_test_settings_with_default_dir.gradle",
                "-b", "build_with_default_dir.gradle",
                "clean",
                "build"
            ).forwardOutput()
            .withDebug(true)
            .build()

        // Verify the result
        assertThat(result.task(":build")).extracting { it?.outcome }.isEqualTo(SUCCESS)
        // Verify that POJOs are generated in the configured directory
        assertThat(projectDir / EXPECTED_DEFAULT_PATH / "Result.java").exists()
        assertThat(projectDir / EXPECTED_DEFAULT_PATH / "Result.java").exists()
    }

    @Test
    fun sourcesGenerated_UsingOverridenOutputDir() {
        // build a project
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "--stacktrace",
                "-b", "build_with_output_dir.gradle",
                "clean",
                "build"
            ).forwardOutput()
            .withDebug(true)
            .build()

        // Verify the result
        assertThat(result.task(":build")).extracting { it?.outcome }.isEqualTo(SUCCESS)
        // Verify that POJOs are generated in the configured directory
        assertThat(projectDir / BUILD_DIR / "custom-generated" / SOURCES_PATH / "Result.java").exists()
    }

    @Test
    fun sourcesGenerated_OmitNullInputFields() {
        // build a project
        val result = GradleRunner.create()
            .withProjectDir(projectDir.toFile())
            .withPluginClasspath()
            .withArguments(
                "--stacktrace",
                "-c", "smoke_test_settings_omit_null_input_fields.gradle",
                "-b", "build_omit_null_input_fields.gradle",
                "clean",
                "build"
            )
            .forwardOutput()
            .withDebug(true)
            .build()

        // Verify the result
        assertThat(result.task(":build")).extracting { it?.outcome }.isEqualTo(SUCCESS)
        // Verify that POJOs are generated in the configured directory
        assertThat(projectDir / EXPECTED_DEFAULT_PATH / "Result.java").exists()
        assertThat(projectDir / EXPECTED_DEFAULT_PATH / "Filter.java").exists()
    }

    companion object {
        private val BUILD_DIR = Paths.get("build")
        private val SOURCES_PATH = Paths.get("com", "netflix", "testproject", "graphql", "types")
        private val EXPECTED_PATH = BUILD_DIR / "graphql" / "generated" / "sources" / "dgs-codegen" / SOURCES_PATH
        private val EXPECTED_DEFAULT_PATH = BUILD_DIR / "generated" / "sources" / "dgs-codegen" / SOURCES_PATH
    }
}
