import org.jetbrains.kotlin.gradle.dsl.KotlinVersion
import org.jetbrains.kotlin.gradle.tasks.KotlinCompilationTask

/*
 *
 *  Copyright 2020 Netflix, Inc.
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 *
 */

plugins {
    id 'org.jetbrains.kotlin.jvm' version "1.9.20" apply false
    id 'com.netflix.nebula.netflixoss' version '11.3.2'
    id "org.jmailen.kotlinter" version "3.11.1"
}

description = 'Netflix GraphQL DGS Code Generation'

allprojects {

    ext {
        Versions = [
                KOTLIN_VERSION: '1.9.21'
        ]
    }

    repositories {
        mavenCentral()
    }

    apply plugin: 'com.netflix.nebula.netflixoss'
    apply plugin: 'com.netflix.nebula.info'
    apply plugin: 'org.jetbrains.kotlin.jvm'

    // Set Kotlin api / language version to 1.7 since dgs-framework
    // is stuck on Gradle 7.x
    tasks.named('compileKotlin', KotlinCompilationTask.class) {
      compilerOptions {
         apiVersion = KotlinVersion.KOTLIN_1_7
         languageVersion = KotlinVersion.KOTLIN_1_7
      }
    }

    group = 'com.netflix.graphql.dgs.codegen'

    dependencies {
        implementation platform("org.jetbrains.kotlin:kotlin-bom:${Versions.KOTLIN_VERSION}")
        testImplementation "org.jetbrains.kotlin:kotlin-compiler"

        testImplementation platform('org.junit:junit-bom:5.10.+')
        testImplementation 'org.assertj:assertj-core:3.24.+'
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.junit.jupiter:junit-jupiter-params'
    }

    tasks.withType(Test).configureEach {
        useJUnitPlatform()
    }

    java {
        toolchain {
            languageVersion.set(JavaLanguageVersion.of(8))
        }
    }
}

subprojects {
    apply {
        plugin("org.jmailen.kotlinter")
    }
    kotlinter {
        disabledRules = ["no-wildcard-imports"]
    }
}
